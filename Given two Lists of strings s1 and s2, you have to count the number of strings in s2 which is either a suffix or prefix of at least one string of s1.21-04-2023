class trie{
    
    boolean end;
    trie arr[];
    trie(){
        
       end=false;
       arr=new trie[26];
    }
}
//User function Template for Java
class Solution
{
     trie root=new trie();
    
     public void addWord(String word) {
         trie node=root;
       for(int i=0;i<word.length();i++){
           char ch=word.charAt(i);
           if(node.arr[ch-'a']==null){
            
                node.arr[ch-'a']=new trie();
           }
           node=node.arr[ch-'a'];
       }
       node.end=true;
    }
     boolean find(String word){
         trie node=root;
           for(int i=0;i<word.length();i++){
           char ch=word.charAt(i);

           if(node.arr[ch-'a']!=null){
            
                node=node.arr[ch-'a'];
           }
           else{
               return false;
           }
         
       }
       
       return true;
    }
    public int prefixSuffixString(String s1[],String s2[])
    {
        int cnt=0;
        
        
        for(String it : s1){
            addWord(it);
            StringBuilder sb=new StringBuilder(it);
            addWord(sb.reverse().toString());
        }
        for(String it: s2){
            
            boolean ok=false;
            
            ok=ok | find(it);
            StringBuilder sb=new StringBuilder(it);
            ok=ok | find(sb.reverse().toString());
            
            if(ok) cnt++;

        }
        
        return cnt;
    }
}
