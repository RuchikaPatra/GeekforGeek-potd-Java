class Pair {
    int hd;
    Node node;
    Pair(int hd, Node node) {
        this.hd=hd;
        this.node = node;
    }
}
class Solution
{
    long verticallyDownBST(Node root,int target)
    {
        if(root ==null) {
            return -1;
        }
        Node head=null;
        Queue<Node> q =new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()) {
            int n=q.size();
            for(int i=1;i<=n;i++) {
                Node curr=q.poll();
                if(curr.data == target) {
                    head=curr;
                    break;
                }
                if(curr.left!=null) {
                    q.add(curr.left);
                }
                if(curr.right!=null) {
                    q.add(curr.right);
                }
            }
        }
        if(head==null) {
            return -1;
        }
        //System.out.println(head.data);
        Queue<Pair> q1 = new LinkedList<>();
        long sum=0;
        q1.add(new Pair(0,head));
        while(!q1.isEmpty()) {
            int n=q1.size();
            for(int i=1;i<=n;i++) {
                Pair curr =q1.poll();
                if(curr.hd==0) {
                    sum+=curr.node.data;
                }
                if(curr.node.left!=null) {
                    q1.add(new Pair(curr.hd-1, curr.node.left));
                }
                if(curr.node.right!=null) {
                    q1.add(new Pair(curr.hd+1, curr.node.right));
                }
            }
        }
        
        return sum-head.data;
    }
}
