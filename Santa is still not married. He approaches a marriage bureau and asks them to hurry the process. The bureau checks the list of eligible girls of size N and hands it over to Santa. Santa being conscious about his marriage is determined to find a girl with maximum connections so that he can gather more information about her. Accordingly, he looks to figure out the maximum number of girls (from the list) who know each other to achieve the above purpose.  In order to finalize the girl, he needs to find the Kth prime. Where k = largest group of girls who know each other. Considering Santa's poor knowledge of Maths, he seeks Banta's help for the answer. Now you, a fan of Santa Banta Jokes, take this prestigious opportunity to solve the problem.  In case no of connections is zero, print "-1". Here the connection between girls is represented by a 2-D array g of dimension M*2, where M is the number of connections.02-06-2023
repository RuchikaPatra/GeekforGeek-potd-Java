class Complete{
    static int groupSize = 0;
    static ArrayList<Integer> primeList;
    
    public static void precompute () {
        
        primeList = new ArrayList<>();
        
        boolean isPrime[] = new boolean[1000001];
        Arrays.fill(isPrime,true);
        
        isPrime[0]=false;
        isPrime[1]=false;
        
        for(int i=2;i<=1000000;i++){
            if(isPrime[i]==true){
                primeList.add(i);
                for(int j=2*i;j<=1000000;j+=i){
                    isPrime[j]=false;
                }
            }
        }
    }
    
    public static int helpSanta (int n, int m, int g[][]) {
        
        ArrayList<Integer> graph[] = new ArrayList[n+1];
        for(int i=0;i<=n;i++)graph[i]=new ArrayList<>();
        
        for(int i=0;i<m;i++){
            graph[g[i][0]].add(g[i][1]);
            graph[g[i][1]].add(g[i][0]);
        }
        
        boolean vis[] = new boolean[n+1];
        Arrays.fill(vis,false);
        
        int maxGroupSize = 0;
        
        for(int i=1;i<=n;i++){
            if(vis[i]==false){
                groupSize =0;
                dfs(i,vis,graph);
                maxGroupSize=Math.max(maxGroupSize,groupSize);
            }
        }
        
        if(maxGroupSize==1)return -1;
        
        return primeList.get(maxGroupSize-1);
    }
    
    public static void dfs(int currentGirl , boolean[] vis , ArrayList<Integer> graph[]){
        
        vis[currentGirl] = true;
        
        for(int i=0;i<graph[currentGirl].size();i++){
            if(vis[graph[currentGirl].get(i)]==false){
                dfs(graph[currentGirl].get(i),vis,graph);
            }
        }
        groupSize++;
    }
}
