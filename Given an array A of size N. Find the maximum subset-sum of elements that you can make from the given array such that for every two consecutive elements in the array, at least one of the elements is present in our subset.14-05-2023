class Solution {
    
    public static int findMaxR(int N, int[] A , int i ,int[] dp){
        if(i >= N){
            return 0;
        }
        int sum1 , sum2;
        if(dp[i+1] == Integer.MIN_VALUE){
             sum1 = findMaxR(N , A , i+1 , dp);
            dp[i+1] = sum1;
        }else{
            sum1 = dp[i+1];
        }
        
        if(dp[i+2] == Integer.MAX_VALUE){
            sum2 = findMaxR(N , A , i+2 , dp);
            dp[i+2] = sum2;
        }else{
            sum2 = dp[i+2];
        }
        
        int max = A[i] + Math.max(sum1 , sum2);
        
        return max;
        
        
    }

    public static long findMaxSubsetSum(int N, int[] A) {
        // code here
        
        int dp[] = new int[100000];
        for(int i = 0 ;i < dp.length ; i++){
            dp[i] = Integer.MIN_VALUE;
        }
        return Math.max(findMaxR(N , A ,0 , dp) , findMaxR(N, A , 1 , dp) );
        
        
    }
}
