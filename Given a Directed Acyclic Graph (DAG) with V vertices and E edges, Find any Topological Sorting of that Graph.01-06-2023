class Solution
{
    //Function to return list containing vertices in Topological order. 
    static void dfs(int curr, ArrayList<ArrayList<Integer>> adj,Stack<Integer>stack,boolean []visited){
        visited[curr]=true;
        for(int neighbor:adj.get(curr)){
          if(!visited[neighbor]){
              dfs(neighbor,adj,stack,visited);
          }    
        }
        stack.push(curr);
    }
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        Stack<Integer>stack=new Stack<>();
        boolean []visited=new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
            dfs(0,adj,stack,visited);
        }
        }
        
        int result[]=new int[V];
        int i=0;
        while(!stack.isEmpty()){
            result[i++]=stack.pop();
        }
        return result;
    }
}
